"""
Django settings for querymanagement project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import environ 

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)


from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# FIREBASE_CREDENTIALS_FILE = os.path.join(BASE_DIR,"credentials/firebase_service_account.json")
# cred = credentials.Certificate(FIREBASE_CREDENTIALS_FILE)
# firebase_admin.initialize_app(cred)
environ.Env.read_env(BASE_DIR, '.env')  

DEBUG = env('DEBUG')

SMS_API_KEY="e6b5deb5-bab2-11ef-8b17-0200cd936042"



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t$y13n94#^6p6hcc+t^=^gl0_3p(=u*2&gf9g6xp&aolc)6qv*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

APPEND_SLASH = True

AUTH_USER_MODEL = 'api.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'api',
  
   
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')

CORS_ORIGIN_ALLOW_ALL = True



ROOT_URLCONF = 'querymanagement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'querymanagement.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'yourdatabase',  # Retrieve from .env
#         'USER': 'yourusername',  # Retrieve from .env
#         'PASSWORD': 'yourpassword',  # Retrieve from .env
#         'HOST': '0.0.0.0',
#         'PORT': '5432',  # Default to '5432' if not provided
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# settings.py

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# EMAIL_HOST = 'smtp.gmail.com'  # Gmail's SMTP server
# EMAIL_PORT = 587  # TLS port
# EMAIL_USE_TLS = True  # Enable TLS
# EMAIL_HOST_USER = 'akhileshspujar163@gmail.com'  # Your Gmail address
# EMAIL_HOST_PASSWORD = 'nnwg tmwt kysg obab'
# DEFAULT_FROM_EMAIL = 'akhileshspujar163@gmail.com'  # The default "from" email address

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Token validity period
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Refresh token validity period
    'ROTATE_REFRESH_TOKENS': True,                 # Generates new refresh token upon use
    'BLACKLIST_AFTER_ROTATION': True,              # Blacklists old refresh tokens
    'ALGORITHM': 'HS256',                          # Encryption algorithm
    'SIGNING_KEY': 'defaultsecret',                     # Use Django's secret key
    'AUTH_HEADER_TYPES': ('Bearer',),              # Header type
}